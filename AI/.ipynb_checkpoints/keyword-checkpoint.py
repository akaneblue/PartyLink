{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "404b777e-4bd7-4ccd-8164-09bb8f672ae4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastapi import FastAPI\n",
    "from pydantic import BaseModel\n",
    "from typing import List\n",
    "from transformers import pipeline\n",
    "import requests\n",
    "import json\n",
    "import os\n",
    "\n",
    "app = FastAPI()\n",
    "\n",
    "# ✅ 모델 초기화 (zero-shot classification)\n",
    "classifier = pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\")\n",
    "\n",
    "# ✅ OpenRouter API Key\n",
    "OPENROUTER_API_KEY = \"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\"  # 실제 키로 바꿔줘\n",
    "\n",
    "# ✅ 요청 모델\n",
    "class InterestMatchRequest(BaseModel):\n",
    "    text: str\n",
    "    candidate_interests: List[str]\n",
    "\n",
    "# ✅ 응답 모델\n",
    "class InterestMatchResponse(BaseModel):\n",
    "    matched: str\n",
    "    is_new: bool\n",
    "\n",
    "# ✅ LLM 호출 함수 (OpenRouter 사용)\n",
    "def ask_llm_for_new_interest(text: str) -> str:\n",
    "    prompt = f\"\"\"\n",
    "    다음 소개글을 보고 해당 활동 분야를 단어 하나로 알려줘. \n",
    "    출력은 오직 단어 하나만, 설명 없이.\n",
    "    \n",
    "    소개글: {text}\n",
    "    \"\"\"\n",
    "    \n",
    "    response = requests.post(\n",
    "        url=\"https://openrouter.ai/api/v1/chat/completions\",\n",
    "        headers={\n",
    "            \"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\",\n",
    "            \"Content-Type\": \"application/json\"\n",
    "        },\n",
    "        data=json.dumps({\n",
    "            \"model\": \"nvidia/llama-3.1-nemotron-ultra-253b-v1:free\",\n",
    "            \"messages\": [{\"role\": \"user\", \"content\": prompt}]\n",
    "        })\n",
    "    )\n",
    "\n",
    "    if response.status_code == 200:\n",
    "        result = response.json()\n",
    "        return result[\"choices\"][0][\"message\"][\"content\"].strip()\n",
    "    else:\n",
    "        raise Exception(f\"LLM 호출 실패: {response.text}\")\n",
    "\n",
    "# ✅ 핵심 라우팅 함수\n",
    "@app.post(\"/match\", response_model=InterestMatchResponse)\n",
    "def match_interest(req: InterestMatchRequest):\n",
    "    result = classifier(req.text, req.candidate_interests)\n",
    "    top_label = result[\"labels\"][0]\n",
    "    top_score = result[\"scores\"][0]\n",
    "\n",
    "    print(f\"[Zero-shot] top_label: {top_label}, score: {top_score}\")\n",
    "\n",
    "    if top_score >= 0.6:\n",
    "        return InterestMatchResponse(matched=top_label, is_new=False)\n",
    "    else:\n",
    "        new_keyword = ask_llm_for_new_interest(req.text)\n",
    "        return InterestMatchResponse(matched=new_keyword, is_new=True)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
